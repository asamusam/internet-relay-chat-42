1. Set up a basic server infrastructure
    - Develop the logic to accept client connections using TCP/IP
    - Store information for each connected client (socket, username, nickname)
    - Handle client disconnections and timeouts
2. Parse incoming messages
    - Decide what they are and if they are valid
    - Error handling: silently ignore or reply with an error message
3. NICK and USER commands
    - Implement the commands: update the user information and handle errors
    - Authentication: wait for the client to set their nickname and username upon connnection
4. Private messaging
    - PRIVMSG command including errors
    - Actually forward the message
5. Channels
    - Implement the logic for channels creation and joining
    - Commands JOIN, PART
    - Broadcast the message to all participants, ensuring the message is received by all of them
6. Channel operators
    - Implement the operator assignment: how does a user become an operator
    - Commands KICK, INVITE, TOPIC
    - Command MODE
7. Security enhancements
    - TLS
    - Preventing flooding
    - Logs
    - Configuration file:
        * A server should use some sort of 'access control list' (either in the
        configuration file or elsewhere) that is read at startup and used to
        decide what hosts clients may use to connect to it.
        Both 'deny' and 'allow' should be implemented to provide the required
        flexibility for host access control.
        * Storage of oper passwords in configuration files is preferable to hard coding
        them in and should be stored in a crypted format (ie using crypt(3)
        from Unix) to prevent easy theft.
    - Limit number of attemps for the PASS command
8. Other enhancements
    - RPL_ISUPPORT